[{"$contentActions":[{"input":{"bypass":false,"$cardContent":{"document":{"id":"35a5d357-4677-4157-8c8d-788ce02a2023","type":"text/plain","textContent":"Entrada do usuário","content":"Entrada do usuário"},"editable":false,"deletable":true,"position":"right","editing":false},"$invalid":false},"$invalid":false,"$$hashKey":"object:4177"}],"$conditionOutputs":[],"$enteringCustomActions":[],"$leavingCustomActions":[{"$id":"b24a8436-c821-406f-99fc-eccd0ef3974e","$typeOfContent":"","type":"ExecuteScript","$title":"Process \"userInput\"","$invalid":false,"settings":{"function":"run","source":"function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction botao(inputUsuario, dynamicContent) {\n  const posicoes = {\n      \"1\": \"primeir[oa]|u[mn]\",\n      \"2\": \"segund[ao]|do[ie]s\",\n      \"3\": \"terceir[ao]|tr[eê]s\"\n  }\n  try {\n      if (!inputUsuario) return 'inatividade'\n      const regexDictionary = {}\n      const { buttons } = JSON.parse(dynamicContent).interactive.action\n      buttons.forEach((button, index) => {\n          const key = `^(${index + 1}|${posicoes[index + 1]}|${escapeRegExp(button.reply.title.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase())})$`\n          regexDictionary[key] = button.reply.title\n      })\n      for (let regex in regexDictionary) {\n          if (new RegExp(regex, 'i').test(inputUsuario.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"))) {\n              return regexDictionary[regex]\n          }\n      }\n      return 'input inesperado'\n  } catch (err) {\n      return 'input inesperado'\n  }\n}\n\nfunction lista(inputUsuario, dynamicContent) {\n  const posicoes = {\n      \"1\": \"primeir[oa]|u[mn]\",\n      \"2\": \"segund[ao]|do[ie]s\",\n      \"3\": \"terceir[ao]|tr[eê]s\",\n      \"4\": \"quart[ao]|[qc]uat(r)?o\",\n      \"5\": \"quint[ao]|[sc]inc[ou]\",\n      \"6\": \"sext[ao]|[sc]inc[uo]\",\n      \"7\": \"s[eé]tim[ao]|[sc]et[ei]\",\n      \"8\": \"oitav[ao]|oit[ou]\",\n      \"9\": \"non[ao]|nov[ei]\",\n      \"10\": \"d[eé][cs]im[ou]|d[ée][sz]\"\n  }\n  try {\n      if (!inputUsuario) return 'inatividade'\n      const regexDictionary = {}\n      const { rows } = JSON.parse(dynamicContent).interactive.action.sections[0]\n      rows.forEach((button, index) => {\n            const key = `^(${index + 1}|${posicoes[index + 1]}|${escapeRegExp(button.title.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase())})$`\n          regexDictionary[key] = button.title\n      })\n      for (let regex in regexDictionary) {\n          if (new RegExp(regex, 'i').test(inputUsuario.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"))) {\n              return regexDictionary[regex]\n          }\n      }\n      return 'input inesperado'\n  } catch (err) {\n      return 'input inesperado'\n  }\n}\n\nfunction run(inputUsuario, dynamicContent) {\n  try {\n    if(!inputUsuario) {\n      return 'inatividade'\n    }\n    if (JSON.parse(dynamicContent).interactive.type === 'button') {\n        return botao(inputUsuario, dynamicContent)\n    } else {\n        return lista(inputUsuario, dynamicContent)\n    }\n  } catch (err) {\n    return 'input inesperado'\n  }\n}","inputVariables":["input.content","dynamicContent"],"outputVariable":"userInput","LocalTimeZoneEnabled":false},"conditions":[]},{"$id":"ec193fd1-15ab-4e51-85e3-d13fe2df684b","$typeOfContent":"","type":"SetVariable","$title":"Set \"exceptionType\" to \"lista\"","$invalid":false,"settings":{"variable":"exceptionType","value":"lista"},"conditions":[{"values":["input inesperado"],"source":"context","comparison":"equals","variable":"userInput"}]},{"$id":"d47e9f4a-5fa9-4684-bdff-e2d6d1cd4c2f","$typeOfContent":"","type":"TrackEvent","$title":"Track \"{state.name} validação\"","$invalid":false,"settings":{"extras":{},"category":"{{state.name}} validação","action":"{{userInput}}"},"conditions":[{"comparison":"exists","source":"context","values":[],"variable":"userInput"}]},{"$id":"0e756d2f-a657-43f2-b54f-af799513e0e7","$typeOfContent":"","type":"TrackEvent","$title":"Track \"{state.name} input inesperado\"","$invalid":false,"settings":{"extras":{},"category":"{{state.name}} input inesperado","action":"{{input.content}}"},"conditions":[{"values":["input inesperado"],"source":"context","comparison":"equals","variable":"userInput"},{"comparison":"exists","source":"context","values":[],"variable":"input.content"}]}],"$inputSuggestions":[],"$defaultOutput":{"stateId":"fallback","$invalid":false},"isAiGenerated":false,"$tags":[{"id":"blip-tag-1e36c839-da48-4729-a904-9bc5b03abba5","label":"ExecuteScript","background":"#FF961E","canChangeBackground":false},{"id":"blip-tag-ac5faa74-3278-471d-a396-f902a44ef83e","label":"SetVariable","background":"#FF4A1E","canChangeBackground":false},{"id":"blip-tag-c4d068a8-6851-44e6-a549-7b2fb6d8d0a7","label":"TrackEvent","background":"#61D36F","canChangeBackground":false},{"id":"blip-tag-561c05c6-a4b9-4e77-8e0e-7bf2cfee4547","label":"UserInput","background":"#000000","canChangeBackground":false}],"id":"f7cbe846-506f-4b96-98ef-51172aa1ba95","root":false,"$title":"[X.X.0.0][INPUT] Lista","$position":{"top":"1116px","left":"6938px"},"$invalidContentActions":false,"$invalidOutputs":false,"$invalidCustomActions":false,"$invalid":false},{"$contentActions":[{"action":{"$id":"28bfb96c-79c5-4ac8-8778-25de14ba63a5","$typeOfContent":"chat-state","type":"SendMessage","settings":{"id":"5f48b832-32a4-499f-a070-903c9fe311d8","type":"application/vnd.lime.chatstate+json","content":{"state":"composing","interval":1000}},"$cardContent":{"document":{"id":"5f48b832-32a4-499f-a070-903c9fe311d8","type":"application/vnd.lime.chatstate+json","content":{"state":"composing","interval":1000}},"editable":true,"deletable":true,"position":"left"}},"$invalid":false,"$$hashKey":"object:2176"},{"action":{"$id":"4e5c1b0e-b89e-4dfc-a2fa-6c5782b88fbe","$typeOfContent":"raw-content","type":"SendRawMessage","settings":{"metadata":{},"type":"application/json","rawContent":"{{dynamicContent}}"}},"$invalid":false,"$$hashKey":"object:2177"},{"input":{"bypass":true,"$cardContent":{"document":{"id":"d1e925f2-97db-4bfb-8cc0-1af8068b39c4","type":"text/plain","textContent":"Entrada do usuário","content":"Entrada do usuário"},"editable":false,"deletable":true,"position":"right","editing":false},"$invalid":false},"$invalid":false,"$$hashKey":"object:2178"}],"$conditionOutputs":[{"stateId":"f7cbe846-506f-4b96-98ef-51172aa1ba95","typeOfStateId":"state","$connId":"con_333","$id":"89e71d43-8dd4-4b6c-bc09-b59a2eef1d05","conditions":[{"source":"input","comparison":"exists","values":[],"$$hashKey":"object:2199"}],"$invalid":false,"$$hashKey":"object:2185"}],"$enteringCustomActions":[{"$id":"75a90e52-db9b-4311-9a75-10d05621c2cb","$typeOfContent":"","type":"TrackEvent","$title":"Track \"{state.name} exibicao\"","$invalid":false,"settings":{"extras":{},"category":"{{state.name}} exibicao","action":"Exibição"},"conditions":[]},{"$id":"d0378df3-2848-4e61-b4b3-6abc7a26d4eb","$typeOfContent":"","type":"ExecuteScript","$title":"Process \"dynamicContent\"","$invalid":false,"settings":{"function":"run","source":"/**\n * @typedef {Object} MenuOption\n * @property {string} id - ID da opção do menu\n * @property {string} title - Título da opção do menu\n * @property {string} description - Descrição da opção do menu\n */\n\n/**\n * Adicione as opções que devem ser exibidas por padrão para todos os usuários. \n * O id deve ser igual a posição do menu que será exibido o botão. Ex: { id: 1 } para o primeiro item da lista.\n * @type {MenuOption[]}\n */\nconst menuOptions = [\n    {\n        \"id\": \"1\",\n        \"title\": \"Solicitar Cartão\",\n        \"description\": \"\"\n    },\n    {\n        \"id\": \"2\",\n        \"title\": \"Desbloquear cartão\",\n        \"description\": \"\"\n    },\n    {\n        \"id\": \"3\",\n        \"title\": \"Esqueci minha senha\",\n        \"description\": \"\"\n    },\n    {\n        \"id\": \"4\",\n        \"title\": \"Perda / Roubo do cartão\",\n        \"description\": \"\"\n    }\n]\n\n/**\n * @typedef {Object} MenuOption\n * @property {number} posicao - Posição que o botão deve ser inserido no menu\n * @property {string} title - Título do botão\n * @property {string} description - Descrição do botão\n */\n/**\n * @summary Essa função adiciona uma opção (botão) no menu de acordo com a posição informada e reordena todos os botões.\n * @param {MenuOption} option - Objeto contendo a posição, título e descrição do botão\n * @example adicionaOpcaoNoMenu({ posicao: 2, title: 'Conta Corrente', description: 'Extratos, Fazer pix, Antecipar saldo, Falar sobre conta, entre outros.' })\n */\nfunction adicionaOpcaoNoMenu({ posicao, title, description }) {\n    if (posicao > menuOptions.length) {\n        posicao = Number(menuOptions[menuOptions.length - 1].id) + 1\n    }\n    if (menuOptions.find(option => option.id == posicao)) {\n        quantidadeItens = menuOptions.length\n        for (let i = Number(posicao - 1); i < quantidadeItens; i++) {\n            menuOptions[i].id = (i + 2).toString()\n        }\n        menuOptions.push({\n            id: posicao.toString(),\n            title: title.slice(0, 24),\n            description: description.slice(0, 72) || ''\n        })\n    } else {\n        menuOptions.push({\n            id: posicao.toString(),\n            title: title.slice(0, 24),\n            description: description.slice(0, 72)\n        })\n    }\n    menuOptions.sort((a, b) => a.id - b.id)\n}\n\n/**\n * @typedef {Object} MenuOptionUpdate\n * @property {string} parametroDeBusca - Título ou descrição da opção que deseja atualizar\n * @property {string} title - Novo título do botão\n * @property {string} description - Nova descrição do botão\n */\n\n/**\n * @summary Essa função atualiza o título e descrição de uma opção (botão) do menu.\n * @param {MenuOptionUpdate} option - Objeto contendo o título ou descrição da opção que deseja atualizar, novo título e nova descrição do botão\n * @example atualizaOpcaoMenu({ parametroDeBusca: 'Conta Corrente', title: 'Conta Corrente', description: 'Extratos, Fazer pix, Antecipar saldo, Falar sobre conta, entre outros.' })\n */\nfunction atualizaOpcaoMenu({ parametroDeBusca, title, description }) {\n    // Parametro de busca é o title ou description da opção que deseja atualizar\n    const opcao = menuOptions.find(option => option.title === parametroDeBusca || option.description === parametroDeBusca)\n    if (!opcao) {\n        return\n    }\n    menuOptions.find(option => option.id === opcao.id).title = title.slice(0, 24)\n    menuOptions.find(option => option.id === opcao.id).description = description.slice(0, 72) || ''\n}\n/**\n * @typedef {Object} PermissionCheck\n * @property {string} tituloDoBotao - Título ou descrição da opção que deseja verificar\n * @property {Array.<string>} permissoes - Permissões do usuário (usar o array de permissões da conta selecionada)\n * @property {string} permissoesNecessarias - Permissão necessária para exibir a opção\n */\n\n/**\n * @summary Essa função verifica se o usuário possui a permissão necessária para exibir a opção no menu.\n * @param {PermissionCheck} permission - Objeto contendo o título ou descrição da opção que deseja verificar, permissões do usuário e permissão necessária para exibir a opção\n * @example verificaPermissao({ tituloDoBotao: 'Conta Corrente', permissoes: ['extratoDeContaCorrente'], permissoesNecessarias: 'extratoDeContaCorrente' })\n */\nfunction verificaPermissao({ tituloDoBotao, permissoes, permissoesNecessarias }) {\n    const opcao = menuOptions.find(option => option.title === tituloDoBotao || option.description === tituloDoBotao)\n    if (permissoes.includes(permissoesNecessarias)) {\n        return\n    }\n    if (!opcao) {\n        return\n    }\n    const index = menuOptions.indexOf(opcao)\n    menuOptions.splice(index, 1)\n}\n\nfunction removeOpcaoDoMenu({ tituloDoBotao }) {\n    const opcao = menuOptions.find(option => option.title === tituloDoBotao || option.description === tituloDoBotao)\n    if (!opcao) {\n        return\n    }\n    const index = menuOptions.indexOf(opcao)\n    menuOptions.splice(index, 1)\n}\n\n/**\n * @typedef {Object} ContaSelecionada\n * @property {number} codigoCliente\n * @property {string} baseDocumento\n * @property {string} agencia\n * @property {string} agenciaCadastroBacen\n * @property {string} conta\n * @property {(boolean|string)} contaCorrenteSPD\n * @property {string} canal\n * @property {string} shortname\n * @property {string} usuario\n * @property {number} codigoSegmento\n * @property {string} nivel\n * @property {string} nomeEmpresa\n * @property {string} tipoPessoa\n * @property {string} doc\n * @property {string} nomeCompleto\n * @property {string} primeiroNome\n * @property {string} filaGerente\n * @property {Array.<string>} permissoes\n * @property {string} cpfAppKey\n * @property {(boolean|string)} ec\n * @property {string} segmentoGerente\n */\n\n/**\n * @param {ContaSelecionada} contaSelecionada - Objeto contendo as informações da conta selecionada\n * @description Dentro do try, defina todas as regras de exibição, utilizando as funções disponiveis: \"verificaPermissao\", \"atualizaOpcaoMenu\", \"adicionaOpcaoNoMenu\"\n */\nfunction run(contaSelecionada) {\n    try {\n        // const { ec, cpfAppKey } = JSON.parse(contaSelecionada)\n        return {\n            \"recipient_type\": \"individual\",\n            \"type\": \"interactive\",\n            \"interactive\": {\n                \"type\": \"list\",\n                \"header\": {\n                    \"type\": \"text\",\n                    \"text\": \"\"\n                },\n                \"body\": {\n                    \"text\": `Certo, sobre *Cartão* como podemos te ajudar?`\n                },\n                \"action\": {\n                    \"button\": \"Assuntos\",\n                    \"sections\": [\n                        {\n                            \"title\": \"\",\n                            \"rows\": menuOptions\n                        }\n                    ]\n                }\n            }\n        }\n    } catch (err) {\n        return {\n            error: err.message,\n            exceptionType: 'reiniciarFluxo',\n            dynamicContent: {\n                \"type\": \"text/plain\",\n                \"content\": `Estamos fazendo alguns ajustes no sistema e alguns recursos podem estar temporariamente indisponíveis. Em breve, estaremos de volta ao normal.`\n            }\n        }\n    }\n}","inputVariables":["contaSelecionada"],"outputVariable":"dynamicContent","LocalTimeZoneEnabled":false},"conditions":[]}],"$leavingCustomActions":[],"$inputSuggestions":[],"$defaultOutput":{"stateId":"fallback","$invalid":false},"isAiGenerated":false,"$tags":[{"id":"blip-tag-f599345b-08bc-4bc3-a282-2a081d9575ed","label":"TrackEvent","background":"#61D36F","canChangeBackground":false},{"id":"blip-tag-577abd69-cee7-4b0e-a125-4e77b5ace91e","label":"ExecuteScript","background":"#FF961E","canChangeBackground":false},{"id":"blip-tag-9ca3240e-764f-4b9d-9703-1cf4bd8c7305","label":"SendMessage","background":"#EE82EE","canChangeBackground":false}],"id":"e0092495-e95a-44a8-afe3-0c150eda196d","root":false,"$title":"[X.X.0.0][MSG] Lista","$position":{"top":"827px","left":"6938px"},"$invalidContentActions":false,"$invalidOutputs":false,"$invalidCustomActions":false,"$invalid":false}]